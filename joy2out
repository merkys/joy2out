#!/usr/bin/perl

use strict;
use warnings;
use threads;

use Linux::Joystick;
use Thread::Semaphore;

$| = 1; # autoflushing STDOUT

my $stdout = new Thread::Semaphore;

my $max_dev_js = 8;
my @threads;

my $js;
for( my $i = 0; $i <= $max_dev_js ; $i++ ) {
    $js = Linux::Joystick->new( $i );
    next if !defined $js;
    $stdout->down(); # acquiring a lock on STDOUT
    print "# Joystick $i has " . $js->buttonCount() . ' buttons and ' .
          $js->axisCount() . " axes.\n";
    $stdout->up(); # releasing a lock on STDOUT
    my $thread = threads->create( \&read_joystick, $js );
    push @threads, $thread;
}

if( !@threads ) {
    die "$0: none of joysticks 0-$max_dev_js were found";
}

for (@threads) {
    $_->join(); # waiting for all threads to finish
}

sub read_joystick
{
    my( $js ) = @_;

    # blocking reads:
    while( my $event = $js->nextEvent ) {
        $stdout->down(); # acquiring a lock on STDOUT
        print $event->type, "\t";
        if( $event->isButton ) {
            print $event->button, "\t";
            if( $event->buttonDown ) {
                print 'PRESS';
            } else {
                print 'RELEASE';
            }
        } elsif( $event->isAxis ) {
            print $event->axis, "\t", $event->axisValue, "\t";
            print 'UP' if $event->stickUp;
            print 'DOWN' if $event->stickDown;
            print 'LEFT' if $event->stickLeft;
            print 'RIGHT' if $event->stickRight;
        } else { # should never happen
            print "UNKNOWN\t", $event->hexDump;
        }
        print "\n";
        $stdout->up(); # releasing a lock on STDOUT
    }

    # if the while loop terminates, we got a false (undefined) event:
    die "$0: ERROR, " . $js->errorString;    
}
